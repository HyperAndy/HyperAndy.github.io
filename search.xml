<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多模态综述</title>
      <link href="2020/12/21/multimodal/"/>
      <url>2020/12/21/multimodal/</url>
      
        <content type="html"><![CDATA[<h1 id="1-multimodal-综述"><a href="#1-multimodal-综述" class="headerlink" title="1. multimodal 综述"></a>1. multimodal 综述</h1><div class="row">    <embed src="/pdf/word.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="2-具体模型发展"><a href="#2-具体模型发展" class="headerlink" title="2. 具体模型发展"></a>2. 具体模型发展</h1><div class="row">    <embed src="/pdf/mutimodalppt.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公司 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR推导</title>
      <link href="2020/12/19/lr/"/>
      <url>2020/12/19/lr/</url>
      
        <content type="html"><![CDATA[<h1 id="LR推导"><a href="#LR推导" class="headerlink" title="LR推导"></a>LR推导</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>分类任务与回归任务的区别：</p><ul><li>输出变量为连续变量的预测问题——回归任务；</li><li>输出变量为有限个离散变量的预测问题——分类任务；</li></ul><p>逻辑回归的本质是通过回归的方法来解决分类任务，即通过回归预测概率，进而得到分类结果。</p><h2 id="2-相关概念"><a href="#2-相关概念" class="headerlink" title="2. 相关概念"></a>2. 相关概念</h2><p><strong>几率</strong>：指一件事发生与不发生概率的比值。</p><p><strong>对数几率</strong>：</p><script type="math/tex; mode=display">\begin{equation}logit(p) = log(\frac{p}{1-p})\end{equation}</script><p><strong>逻辑斯谛分布</strong>：其分布函数为</p><script type="math/tex; mode=display">\begin{equation}F(X) = P(X \leq x) = \frac {1} {1 + e ^ {-(x - \mu)/\gamma}}\end{equation}</script><p>概率密度函数为</p><script type="math/tex; mode=display">\begin{equation}f(x) = F^{\prime}(x) = \frac {e^{-(x - \mu)/\gamma}}{\gamma {(1 + e^{-(x - \mu)/\gamma})}^2}\end{equation}</script><p>其中 $\mu$ 为位置参数，$\gamma &gt; 0 $ 为形状参数，其以 $(\mu, \frac{1}{2})$ 为中心对称</p><script type="math/tex; mode=display">\begin{equation}F(-x + \mu) - \frac{1}{2} = -F(x + \mu) + \frac{1}{2}\end{equation}</script><p>其概率密度函数和分布函数形状为</p><p><img src= "/img/load.gif" data-lazy-src="/img/bg/logistic.png" alt=""></p><h2 id="3-数学推导"><a href="#3-数学推导" class="headerlink" title="3. 数学推导"></a>3. 数学推导</h2><ol><li><p>线性方程</p><script type="math/tex; mode=display">\begin{equation}z = w \cdot x + b\end{equation}</script></li><li><p>多元线性方程</p><script type="math/tex; mode=display">\begin{equation}z = w_0 \cdot x_0 + w_1 \cdot x_1 + \cdots + w_n \cdot x_n + b\end{equation}</script><p>写成矩阵形式为</p><script type="math/tex; mode=display">\begin{equation}z = W^T X\end{equation}</script></li><li><p>判别函数sigmoid</p><script type="math/tex; mode=display">\begin{equation}\sigma (z) = \frac{1}{1 + e^{-z}}\end{equation}</script></li><li><p>多元线性方程经过判别函数后</p><script type="math/tex; mode=display">\begin{equation}\sigma (z) = \frac{1}{1 + e^{-W^T X}}\end{equation}</script></li><li><p>依据$\sigma(z)$函数的特性，定义其预测为正例的概率，则</p><script type="math/tex; mode=display">\begin{equation}P(y=1|w,x) = \sigma(z) \\P(y=0|w,x) = 1 - \sigma(z)\end{equation}</script></li><li><p>预测正确表示方式为</p><script type="math/tex; mode=display">\begin{equation}P(y^{(i)}|w^{(i)},x^{(i)}) = (\sigma (w^{(i)}, x^{(i)}))^{y^{(i)}} \cdot (1 - \sigma (w^{(i)}, x^{(i)}))^{1 - y^{(i)}}\end{equation}</script></li><li><p>对于所有样本，假设每条样本生成过程独立，在整个样本空间（N个样本）的概率分布（即似然函数）为</p><script type="math/tex; mode=display">\begin{equation}P(Y|X;W) = \prod_{i=1}^{N} ((\sigma (w^{(i)}, x^{(i)}))^{y^{(i)}} \cdot (1 - \sigma (w^{(i)}, x^{(i)}))^{1 - y^{(i)}})\end{equation}</script></li><li><p>通过对数变换，转换成加法形式，便于求解</p><script type="math/tex; mode=display">\begin{equation}l(w) = \sum_{i=1}^{N} logP(Y|X;W) = \sum_{i=1}^{N} y^{(i)} \cdot \log(\sigma (w^{(i)}, x^{(i)}) + (1 - y^{(i)}) \cdot \log (1 - \sigma (w^{(i)}, x^{(i)}))\end{equation}</script><p>其中常见的参考资料中使用 $\theta$ 代替 $w$ ， 即</p><script type="math/tex; mode=display">\begin{equation}l(\theta) = \sum_{i=1}^{N} y^{(i)} \cdot \log(h_\theta (x^{(i)}) + (1 - y^{(i)}) \cdot \log (1 - h_\theta (x^{(i)}))\end{equation}</script></li><li><p>使用随机梯度下降法更新参数</p><script type="math/tex; mode=display">\begin{alignat}{1}\frac{\partial}{\partial \theta _j}l(\theta) & = \left(y\frac{1}{h_\theta(x)} - (1-y)\frac{1}{1 - h_\theta(x)}\right)\frac{\partial}{\partial \theta_j}h_\theta(x) \\& = \left(\frac{y(1-h_\theta(x)) - (1-y)h_\theta(x)}{h_\theta(x)(1-h_\theta(x))}\right)h_\theta(x)(1-h_\theta(x))\frac{\partial}{\partial \theta_j}\theta^Tx \\& = (y - h_\theta(x))x_j\end{alignat}</script></li><li><p>通过扫描样本，迭代求得参数</p><script type="math/tex; mode=display">\begin{equation}\theta_j := \theta_j + \alpha(y^{(i)} - h_\theta(x^{(i)}))x_{j}^{(i)}\end{equation}</script><p>式子中 $\alpha$ 表示学习率</p></li></ol><h2 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h2><p>优点：</p><ul><li>自变量为连续和离散均可</li><li>易于解释</li></ul><p>缺点：</p><ul><li>对自变量多重共线性敏感。例如两个高度相关自变量同时放入模型，可能导致较弱的一个自变量回归符号不符合预期，符号被扭转。需要利用因子分析或者变量聚类分析等手段来选择代表性的自变量，以减少候选变量之间的相关性；</li><li>预测结果呈“S”型，因此从log(odds)向概率转化的过程是非线性的，在两端随着log(odds)值的变化，概率变化很小，边际值太小，slope太小，而中间概率的变化很大，很敏感。 导致很多区间的变量变化对目标概率的影响没有区分度，无法确定阀值。</li></ul><p><strong>相关资料</strong>：</p><p><a href="https://www.jianshu.com/p/e8dca5613da6">https://www.jianshu.com/p/e8dca5613da6</a></p><p><a href="https://zhuanlan.zhihu.com/p/102806312">https://zhuanlan.zhihu.com/p/102806312</a></p><p><a href="https://blog.csdn.net/jk123vip/article/details/80591619">https://blog.csdn.net/jk123vip/article/details/80591619</a></p><p><a href="https://blog.csdn.net/ccblogger/article/details/81739200">https://blog.csdn.net/ccblogger/article/details/81739200</a></p>]]></content>
      
      
      <categories>
          
          <category> ai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写NMS&amp;soft-NMS</title>
      <link href="2020/12/18/nms/"/>
      <url>2020/12/18/nms/</url>
      
        <content type="html"><![CDATA[<h1 id="手写NMS-amp-soft-NMS"><a href="#手写NMS-amp-soft-NMS" class="headerlink" title="手写NMS &amp; soft-NMS"></a>手写NMS &amp; soft-NMS</h1><h2 id="1-NMS（非极大抑制）"><a href="#1-NMS（非极大抑制）" class="headerlink" title="1. NMS（非极大抑制）"></a>1. NMS（非极大抑制）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>非极大抑制算法应用相当广泛，其主要目的是消除多余的框，找到最佳的物体检测位置。</p><p>其实现的思想主要是将各个框的置信度进行排序，然后选择其中置信度最高的框A，将其作为标准选择其他框，同时设置一个阈值，当其他框B与A的重合程度超过阈值就将B舍弃掉，然后在剩余的框中选择置信度最大的框，重复上述操作。</p><p><img src= "/img/load.gif" data-lazy-src="/img/bg/nms1.png" style="zoom:80%;" /></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>参考faster rcnn源码 lib/nms/py_cpu_nms.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nms</span>(<span class="params">dets, thresh</span>):</span></span><br><span class="line">    x1 = dets[:, <span class="number">0</span>]</span><br><span class="line">    y1 = dets[:, <span class="number">1</span>]</span><br><span class="line">    x2 = dets[:, <span class="number">2</span>]</span><br><span class="line">    y2 = dets[:, <span class="number">3</span>]</span><br><span class="line">    score = dets[:, <span class="number">4</span>]</span><br><span class="line">    areas = (x2 - x1 + <span class="number">1</span>) * (y2 - y1 + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    keep = []</span><br><span class="line">    order = score.argsort()[::<span class="number">-1</span>] <span class="comment"># 按score从大到小得到索引排列</span></span><br><span class="line">    <span class="keyword">while</span> order.size &gt; <span class="number">0</span>:</span><br><span class="line">        i = order[<span class="number">0</span>]</span><br><span class="line">        keep.append(i)</span><br><span class="line">        xx1 = np.maximum(x1[i], x1[order[<span class="number">1</span>:]]) <span class="comment"># 获取剩余所有框的x位置坐标与基准框i的最大值</span></span><br><span class="line">        yy1 = np.maximum(y1[i], y1[order[<span class="number">1</span>:]])</span><br><span class="line">        xx2 = np.minimum(x2[i], x2[order[<span class="number">1</span>:]])</span><br><span class="line">        yy2 = np.minimum(y2[i], y2[order[<span class="number">1</span>:]])</span><br><span class="line">        inter = np.maximum(<span class="number">0.0</span>, xx2 - xx1 + <span class="number">1</span>) * np.maximum(<span class="number">0.0</span>, yy2 - yy1 + <span class="number">1</span>) <span class="comment"># 防止小于零情况</span></span><br><span class="line">        over = inter / (areas[i] + areas[order[<span class="number">1</span>:]] - inter) <span class="comment"># 获取相交部分所占比例</span></span><br><span class="line">        index = np.where(over &lt;= thresh)[<span class="number">0</span>] <span class="comment"># np.where返回的是tuple，所以用[0]</span></span><br><span class="line">        order = order[index + <span class="number">1</span>] <span class="comment"># 因为去除了第一个元素i，所以在order中的索引要index + 1</span></span><br><span class="line">    <span class="keyword">return</span> keep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dets = np.array([</span><br><span class="line">        [<span class="number">204</span>, <span class="number">102</span>, <span class="number">358</span>, <span class="number">250</span>, <span class="number">0.5</span>],</span><br><span class="line">        [<span class="number">257</span>, <span class="number">118</span>, <span class="number">380</span>, <span class="number">250</span>, <span class="number">0.7</span>],</span><br><span class="line">        [<span class="number">280</span>, <span class="number">135</span>, <span class="number">400</span>, <span class="number">250</span>, <span class="number">0.6</span>],</span><br><span class="line">        [<span class="number">255</span>, <span class="number">118</span>, <span class="number">360</span>, <span class="number">235</span>, <span class="number">0.7</span>]])</span><br><span class="line">    thresh = <span class="number">0.7</span></span><br><span class="line">    res = nms(dets, thresh)</span><br><span class="line">    print(res)    </span><br></pre></td></tr></table></figure><h2 id="2-soft-NMS"><a href="#2-soft-NMS" class="headerlink" title="2. soft-NMS"></a>2. soft-NMS</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>NMS存在一个致命的问题，因为采用了贪心的算法，每次都直接删除了与基准框IOU大于阈值的框。这样会造成一个问题，就是当两个物体比较重叠时，因为检测框IOU大于阈值，那么会直接删掉置信度低的框，导致漏检。</p><p>依此缺点，soft-nms改进的思路为：不要直接删除所有IOU大于阈值的框，而是降低其置信度。</p><p><img src= "/img/load.gif" data-lazy-src="/img/bg/softnms.png" style="zoom:65%;" /></p><p>通过公式比较二者的异同：</p><p>NMS:</p><script type="math/tex; mode=display">\begin{equation}s_i = \begin{cases}s_i, &iou(M,b_i) < N_t\\0, &iou(M,b_i) \geq N_t\end{cases}\end{equation}</script><p>Soft-NMS:</p><p>(1) 线性加权：</p><script type="math/tex; mode=display">\begin{equation}s_i = \begin{cases}s_i, &iou(M,b_i) < N_t\\s_i(1-iou(M,b_i)), &iou(M,b_i) \geq N_t\end{cases}\end{equation}</script><p>(2) 高斯加权：</p><script type="math/tex; mode=display">\begin{equation}s_i = s_i \text{exp}(- \frac{iou(M,b_i)^2}{\sigma}), \forall b_i \notin \mathbb{D}\end{equation}</script><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>伪代码如下：</p><p><img src= "/img/load.gif" data-lazy-src="/img/bg/softnms1.png" style="zoom:70%;" /></p><p>参考soft-NMS源码pyx文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soft_nms</span>(<span class="params">boxes, sigma, Nt, threshold, method=<span class="number">1</span></span>):</span>  <span class="comment"># Nt为IOU阈值， threshold为最后得分的阈值</span></span><br><span class="line">    N = boxes.shape[<span class="number">0</span>]</span><br><span class="line">    pos, maxpos, maxscore = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        maxscore = boxes[i, <span class="number">4</span>]</span><br><span class="line">        maxpos = i</span><br><span class="line"></span><br><span class="line">        tx1 = boxes[i, <span class="number">0</span>]</span><br><span class="line">        ty1 = boxes[i, <span class="number">1</span>]</span><br><span class="line">        tx2 = boxes[i, <span class="number">2</span>]</span><br><span class="line">        ty2 = boxes[i, <span class="number">3</span>]</span><br><span class="line">        ts = boxes[i, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        pos = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取最大位置，然后交换</span></span><br><span class="line">        <span class="comment"># 1. 获取最大分数位置</span></span><br><span class="line">        <span class="keyword">while</span> pos &lt; N:</span><br><span class="line">            <span class="keyword">if</span> maxscore &lt; boxes[pos, <span class="number">4</span>]:</span><br><span class="line">                maxscore = boxes[pos, <span class="number">4</span>]</span><br><span class="line">                maxpos = pos</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 把最大分数位置换到i位置</span></span><br><span class="line">        boxes[i, <span class="number">0</span>] = boxes[maxpos, <span class="number">0</span>]</span><br><span class="line">        boxes[i, <span class="number">1</span>] = boxes[maxpos, <span class="number">1</span>]</span><br><span class="line">        boxes[i, <span class="number">2</span>] = boxes[maxpos, <span class="number">2</span>]</span><br><span class="line">        boxes[i, <span class="number">3</span>] = boxes[maxpos, <span class="number">3</span>]</span><br><span class="line">        boxes[i, <span class="number">4</span>] = boxes[maxpos, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        boxes[maxpos, <span class="number">0</span>] = tx1</span><br><span class="line">        boxes[maxpos, <span class="number">1</span>] = ty1</span><br><span class="line">        boxes[maxpos, <span class="number">2</span>] = tx2</span><br><span class="line">        boxes[maxpos, <span class="number">3</span>] = ty2</span><br><span class="line">        boxes[maxpos, <span class="number">4</span>] = ts</span><br><span class="line"></span><br><span class="line">        <span class="comment"># tx1, ty1, tx2, ty2, ts为最大分数的边框和置信度分数</span></span><br><span class="line">        tx1 = boxes[i, <span class="number">0</span>]</span><br><span class="line">        ty1 = boxes[i, <span class="number">1</span>]</span><br><span class="line">        tx2 = boxes[i, <span class="number">2</span>]</span><br><span class="line">        ty2 = boxes[i, <span class="number">3</span>]</span><br><span class="line">        ts = boxes[i, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 重置pos位置，在步骤1中pos被置为N了</span></span><br><span class="line">        pos = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># NMS操作</span></span><br><span class="line">        <span class="keyword">while</span> pos &lt; N:</span><br><span class="line">            x1 = boxes[pos, <span class="number">0</span>]</span><br><span class="line">            y1 = boxes[pos, <span class="number">1</span>]</span><br><span class="line">            x2 = boxes[pos, <span class="number">2</span>]</span><br><span class="line">            y2 = boxes[pos, <span class="number">3</span>]</span><br><span class="line">            s = boxes[pos, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">            area = (x2 - x1 + <span class="number">1</span>) * (y2 - y1 + <span class="number">1</span>)</span><br><span class="line">            iw = <span class="built_in">min</span>(tx2, x2) - <span class="built_in">max</span>(tx1, x1) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> iw &gt; <span class="number">0</span>:</span><br><span class="line">                ih = <span class="built_in">min</span>(ty2, y2) - <span class="built_in">max</span>(ty1, y1) + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> ih &gt; <span class="number">0</span>:</span><br><span class="line">                    ovr = iw * ih / <span class="built_in">float</span>((tx2 - tx1 + <span class="number">1</span>) * (ty2 - ty1 + <span class="number">1</span>) + area - iw * ih)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> method == <span class="number">1</span>:  <span class="comment"># soft-NMS 线性</span></span><br><span class="line">                        <span class="keyword">if</span> ovr &gt; Nt:</span><br><span class="line">                            weight = <span class="number">1</span> - ovr</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            weight = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> method == <span class="number">2</span>:  <span class="comment"># soft-NMS 高斯</span></span><br><span class="line">                        weight = np.exp(-(ovr * ovr) / sigma)</span><br><span class="line">                    <span class="keyword">else</span>:  <span class="comment"># 原始NMS</span></span><br><span class="line">                        <span class="keyword">if</span> ovr &gt; Nt:</span><br><span class="line">                            weight = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            weight = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    boxes[pos, <span class="number">4</span>] = weight * boxes[pos, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果不满足threshold阈值条件，则把最后面元素换到该位置，达到缩减boxes的目的</span></span><br><span class="line">                    <span class="keyword">if</span> boxes[pos, <span class="number">4</span>] &lt; threshold:</span><br><span class="line">                        boxes[pos, <span class="number">0</span>] = boxes[N - <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                        boxes[pos, <span class="number">1</span>] = boxes[N - <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">                        boxes[pos, <span class="number">2</span>] = boxes[N - <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">                        boxes[pos, <span class="number">3</span>] = boxes[N - <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">                        boxes[pos, <span class="number">4</span>] = boxes[N - <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">                        N -= <span class="number">1</span></span><br><span class="line">                        pos -= <span class="number">1</span></span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    keep = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">    <span class="keyword">return</span> keep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    boxes = np.array([</span><br><span class="line">        [<span class="number">204</span>, <span class="number">102</span>, <span class="number">358</span>, <span class="number">250</span>, <span class="number">0.5</span>],</span><br><span class="line">        [<span class="number">257</span>, <span class="number">118</span>, <span class="number">380</span>, <span class="number">250</span>, <span class="number">0.7</span>],</span><br><span class="line">        [<span class="number">280</span>, <span class="number">135</span>, <span class="number">400</span>, <span class="number">250</span>, <span class="number">0.6</span>],</span><br><span class="line">        [<span class="number">255</span>, <span class="number">118</span>, <span class="number">360</span>, <span class="number">235</span>, <span class="number">0.7</span>]])</span><br><span class="line">    thresh = <span class="number">0.3</span></span><br><span class="line">    threshold = <span class="number">0.25</span></span><br><span class="line">    Nt = <span class="number">0.3</span></span><br><span class="line">    sigma = <span class="number">0.5</span></span><br><span class="line">    res = soft_nms(boxes, sigma, Nt, threshold)</span><br><span class="line">    print(box[res])</span><br></pre></td></tr></table></figure><h2 id="3-adaptive-NMS"><a href="#3-adaptive-NMS" class="headerlink" title="3. adaptive-NMS"></a>3. adaptive-NMS</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>由于soft-NMS中置信度的阈值Nt主要依赖于人工设定，不能适应目标拥挤程度不同的情况。adaptive-NMS提出根据目标的密度来自动设定置信度阈值，算法流程如下图，其中dm为自适应阈值，通过网络根据目标密度预测得到。</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>伪代码如下，其中dm为自适应阈值，通过网络根据目标密度预测得到：</p><p><img src= "/img/load.gif" data-lazy-src="/img/bg/adaptivenms.png" style="zoom:50%;" /></p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/42018282">https://zhuanlan.zhihu.com/p/42018282</a></p><p><a href="https://github.com/bharatsingh430/soft-nms">https://github.com/bharatsingh430/soft-nms</a></p><p><a href="https://zhuanlan.zhihu.com/p/110256988">https://zhuanlan.zhihu.com/p/110256988</a></p><p><a href="https://blog.csdn.net/qq_37014750/article/details/89222334">https://blog.csdn.net/qq_37014750/article/details/89222334</a></p>]]></content>
      
      
      <categories>
          
          <category> ai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML/DP相关公式</title>
      <link href="2020/11/27/ML-DP%E7%9B%B8%E5%85%B3%E5%85%AC%E5%BC%8F/"/>
      <url>2020/11/27/ML-DP%E7%9B%B8%E5%85%B3%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、loss-function"><a href="#一、loss-function" class="headerlink" title="一、loss function"></a>一、loss function</h1><h2 id="1、均方误差（MSE，L2损失）"><a href="#1、均方误差（MSE，L2损失）" class="headerlink" title="1、均方误差（MSE，L2损失）"></a>1、均方误差（MSE，L2损失）</h2><script type="math/tex; mode=display">MSE=\sum_{i=1} ^n (y_i - y_i ^p)^2</script><script type="math/tex; mode=display">\frac{\partial MSE}{\partial y_i}=2\sum_{i=1} ^n (y_i - y_i ^p)</script><p>回归问题中最常见的损失函数。如果对所有样本点只给出一个预测值，那么这个值就是所有目标值的平均值。  </p><ul><li>优点：计算简单，逻辑清晰，衡量误差准确；梯度随着误差的增大或减小，收敛效果好；</li><li>缺点：<strong>对于异常值敏感</strong>，会对其赋予较大的权重，如果异常值不属于考虑范围，则会造成偏差；</li></ul><h2 id="2、平均绝对值误差-又称MAE，L1损失"><a href="#2、平均绝对值误差-又称MAE，L1损失" class="headerlink" title="2、平均绝对值误差(又称MAE，L1损失)"></a>2、平均绝对值误差(又称MAE，L1损失)</h2><script type="math/tex; mode=display">MAE=\sum_{i=1} ^n |y_i - y_i ^p|</script><script type="math/tex; mode=display">\frac{\partial MAE}{\partial y_i}=\begin{cases}1 && y_i > y_i ^p  \\-1 && y_i < y_i ^p\end{cases}</script><p><strong>x 在 <script type="math/tex">y_i=y_i ^p</script>处不可导</strong> ，如果对所有样本点只给出一个预测值，那么这个值就是所有目标值的中位数</p><ul><li>优点：对于异常值有较好的鲁棒性；</li><li>缺点：梯度不变是个严重问题，即使对于很小的损失，梯度也很大，不利于模型收敛，常使用变化的学习率解决;</li></ul><h2 id="3、Huber损失，平滑的平均绝对误差"><a href="#3、Huber损失，平滑的平均绝对误差" class="headerlink" title="3、Huber损失，平滑的平均绝对误差"></a>3、Huber损失，平滑的平均绝对误差</h2><script type="math/tex; mode=display">L_\delta (y, f(x))=\begin{cases}\frac 1 2(y-f(x)) ^2 && for |y-f(x)| < \delta  \\\delta |y-f(x)| - \frac 1 2 \delta ^2 && otherwise\end{cases}</script><p>当误差在<script type="math/tex">[0-\delta,0+\delta]</script>时，等价为MSE，当误差在<script type="math/tex">[-\infty,-\delta]</script>和<script type="math/tex">[\delta,+\infty]</script>时，等价为MAE</p><ul><li>优点：对异常值更加鲁棒；在最优点附近由于调整为MSE，梯度更新会随着误差减小而减小，有利于收敛；</li><li>缺点：引入额外的超参，需要调试； <strong>临界点<script type="math/tex">\delta</script>处不可导</strong></li></ul><h2 id="4、Log-Cosh损失"><a href="#4、Log-Cosh损失" class="headerlink" title="4、Log-Cosh损失"></a>4、Log-Cosh损失</h2><script type="math/tex; mode=display">L(y, y_i ^p)=\sum_{i=1} ^n \log(\cosh(y_i ^p - y_i))</script><p>注：<script type="math/tex">\cosh</script>为双曲余弦函数，与<script type="math/tex">e^x</script>的关系为：</p><script type="math/tex; mode=display">\cosh(x) = \frac {e^x + e^{-x}} {2}</script><p><a href="https://baike.baidu.com/item/%E5%8F%8C%E6%9B%B2%E4%BD%99%E5%BC%A6%E5%87%BD%E6%95%B0/15458452?fr=aladdin">双曲余弦介绍（百度百科）</a><br>比MSE更加平滑的损失函数  </p><ul><li>优点：具有huber损失具备的所有优点；<strong>二阶处处可微</strong>，许多机器学习算法采用牛顿法逼近最优点，比如鼎鼎大名的XGBoost算法，而牛顿法要求损失函数二阶可微；</li><li>缺点：误差很大情况下，一阶梯度和Hessian会变成定值，导致XGBoost出现缺少分裂点的情况;</li></ul><h2 id="5、分位数损失"><a href="#5、分位数损失" class="headerlink" title="5、分位数损失"></a>5、分位数损失</h2><script type="math/tex; mode=display">L_\gamma(y, y_i ^p)=(1-\gamma)\sum_{i; y_i < y_i ^p} |y_i - y_i ^p| + \gamma\sum_{i; y_i \ge y_i ^p} |y_i - y_i ^p|</script><p><strong>预测的是目标的取值范围而不是值</strong>，<script type="math/tex">\gamma</script>是所需的分位数，其值介于0到1之间，<script type="math/tex">\gamma</script>等于0.5，相当于MAE。<br>设置多个<script type="math/tex">\gamma</script>值，得到多个预测模型，然后绘制成图表，即可知道预测范围及对应概率(两个<script type="math/tex">\gamma</script>值相减)；<br><a href="https://blog.csdn.net/sjokes/article/details/84504436">详细图像链接</a></p><h2 id="6、信息熵"><a href="#6、信息熵" class="headerlink" title="6、信息熵"></a>6、<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5/7302318?fr=aladdin">信息熵</a></h2><p>任何信息都存在冗余，冗余大小与信息中每个符号（数字、字母或单词）的出现概率或者说不确定性有关，通过借鉴热力学的概念，把信息中排除了冗余后的平均信息量称为“信息熵”</p><script type="math/tex; mode=display">f(p) = \log\frac {1} {p} = -\log p</script><script type="math/tex; mode=display">H(U) = E[-\log p_i] = -\sum_{i=1} ^m p_i\log p_i</script><p>二项分布情况（二分类）：</p><script type="math/tex; mode=display">H(x) = -p(x)\log(p(x))-(1-p(x))\log(1-p(x))</script><p>熵相关的概念及公式：<a href="https://blog.csdn.net/haolexiao/article/details/70142571">https://blog.csdn.net/haolexiao/article/details/70142571</a></p><p>一篇特别重要的熵的介绍文章：<a href="https://www.cnblogs.com/kyrieng/p/8694705.html">https://www.cnblogs.com/kyrieng/p/8694705.html</a></p><h2 id="7、相对熵（KL散度）"><a href="#7、相对熵（KL散度）" class="headerlink" title="7、相对熵（KL散度）"></a>7、<a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E7%86%B5/4233536?fr=aladdin">相对熵（KL散度）</a></h2><p>相对熵又称KL散度,如果我们对于同一个随机变量 x 有两个单独的概率分布 $P(x)$ 和 $Q(x)$，我们可以使用 KL 散度（Kullback-Leibler (KL) divergence）来衡量这两个分布的差异，即如果用P来描述目标问题，而不是用Q来描述目标问题，得到的信息增量<em>（最大期望）</em>。<br>在机器学习中，P往往用来表示样本的真实分布，Q表示预测的分布  </p><script type="math/tex; mode=display">D_{KL}(p||q) = \sum_{i=1} ^n p(x_i)\log \left(\frac {p(x_i)} {q(x_i)} \right)</script><p>n 为事件所有可能性，<script type="math/tex">D_{KL}</script>的值越小，表示p和q的分布越接近</p><h2 id="8、交叉熵"><a href="#8、交叉熵" class="headerlink" title="8、交叉熵"></a>8、<a href="https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5/8983241?fr=aladdin">交叉熵</a></h2><script type="math/tex; mode=display">\begin{aligned}D_{KL}(p||q) &= \sum_{i=1} ^n p(x_i)\log p(x_i) - \sum_{i=1} ^n p(x_i)\log q(x_i) \\&= -H(p(x_i)) + [-\sum_{i=1} ^n p(x_i)\log q(x_i)]\end{aligned}</script><p>$D_{KL}$为0，等式的前一部分为<script type="math/tex">p(x_i)</script>的熵，后一部分则为p和q的交叉熵。</p><script type="math/tex; mode=display">H(p,q) = -\sum_{i=1} ^n p(x_i)\log q(x_i)</script><p>特别的，在机器学习的而分类中（二项分布）：</p><script type="math/tex; mode=display">loss = -y \log(\hat{y}) - (1-y) \log (1-\hat{y})</script><p>多项式分布中则为：</p><script type="math/tex; mode=display">loss = -\sum_{i} y_i \log(\hat{y_i})</script><h2 id="9、focal-loss"><a href="#9、focal-loss" class="headerlink" title="9、focal loss"></a>9、focal loss</h2><script type="math/tex; mode=display">CE(p_t) = -\alpha_t log(p_t) \to FL(p_t) = -\alpha_t(1-p_t)^{\gamma}log(p_t)</script><p>其中$\gamma \ge 0$<br>由对不平衡样本固定比例调控其损失贡献来平衡样本分布，到通过其概率分布动态调整贡献度；（多数样本，loss贡献度小，则使得模型更关注少数样本）</p><h2 id="10、SmoothL1-loss"><a href="#10、SmoothL1-loss" class="headerlink" title="10、SmoothL1 loss"></a>10、SmoothL1 loss</h2><script type="math/tex; mode=display">SmoothL_1(x)=\begin{cases}0.5 x^2 && if |x| < 1\\|x| - 0.5 && otherwise\end{cases}</script><p>其中，$x=f(x_i)−y_i$ 为真实值和预测值的差值。</p><p>Smooth L1 能从两个方面限制梯度：</p><ul><li>当预测框与 ground truth 差别过大时，梯度值不至于过大；</li><li>当预测框与 ground truth 差别很小时，梯度值足够小。</li></ul><p>对比L1 loss和L2 loss，三者的导数为：</p><script type="math/tex; mode=display">\frac{\partial L_2(x)}{\partial x}=2x</script><script type="math/tex; mode=display">\frac{\partial L_1(x)}{\partial x}=\begin{cases}1 && if x \le 0 \\-1 && otherwise\end{cases}</script><script type="math/tex; mode=display">\frac{\partial Smooth_{L_1}(x)}{\partial x}=\begin{cases}x && if |x| < 1 \\\pm 1 && otherwise\end{cases}</script><h1 id="二、activation-function"><a href="#二、activation-function" class="headerlink" title="二、activation function"></a>二、activation function</h1><p>激活函数的作用：  </p><ul><li>引入非线性（无激活函数则为多层感知机）</li><li>限制输出（或限制下一层输入）<h2 id="1、sigmoid"><a href="#1、sigmoid" class="headerlink" title="1、sigmoid"></a>1、sigmoid</h2><script type="math/tex; mode=display">f(z) = \frac {1} {1 + e^{-z}}</script><script type="math/tex; mode=display">\begin{aligned}\frac {\mathrm{d} f(z)} {\mathrm{d} z} &= \frac {e^{-z}} {(1 + e^{-z}) ^2} \\&= \frac {1+e^{-z}-1} {(1 + e^{-z}) ^2} \\&= f(z) - f^2(z) \\&= f(z)(1-f(z))\end{aligned}</script></li><li>优点：把输入的连续实值变换为0和1之间的输出，特别的，如果是非常大的负数，那么输出就是0；如果是非常大的正数，输出就是1；</li><li>缺点：在深度神经网络中梯度反向传递时导致梯度爆炸和梯度消失，其中梯度爆炸发生的概率非常小，而梯度消失发生的概率比较大；Sigmoid 的 output 不是0均值（即zero-centered）。这是不可取的，因为这会导致后一层的神经元将得到上一层输出的非0均值的信号作为输入。 产生的一个结果就是：如$x&gt;0,f=w^Tx+b$,那么对w求局部梯度则都为正，这样在反向传播的过程中w要么都往正方向更新，要么都往负方向更新，导致有一种捆绑的效果，使得收敛缓慢。当然了，<strong>如果按batch去训练，那么那个batch可能得到不同的信号，所以这个问题还是可以缓解一下的</strong>。因此，非0均值这个问题虽然会产生一些不好的影响，不过跟上面提到的梯度消失问题相比还是要好很多的；其解析式中含有幂运算，计算机求解时相对来讲比较耗时。对于规模比较大的深度网络，这会较大地增加训练时间。</li></ul><h2 id="2、tanh"><a href="#2、tanh" class="headerlink" title="2、tanh"></a>2、tanh</h2><script type="math/tex; mode=display">f(z) = \frac {e^z - e^{-z}} {e^z + e^{-z}} = \frac {1-e^{-2z}} {1+e^{-2z}}</script><script type="math/tex; mode=display">\begin{aligned}\frac {\mathrm{d} f(z)} {\mathrm{d} z} &= \frac {2e^{-z}} {(e^z + e^{-z}) ^2} \\&= \frac {4e^{-2z}} {(1+e^{-2z}) ^2} \\&= 1 - f^2(z)\end{aligned}</script><p><a href="https://blog.csdn.net/GoodShot/article/details/80373372">零均值的作用</a></p><ul><li>优点：解决了非零均值（zero-centered）的问题；</li><li>缺点：梯度消失（gradient vanishing）；幂函数运算；</li></ul><h2 id="3、Relu"><a href="#3、Relu" class="headerlink" title="3、Relu"></a>3、Relu</h2><script type="math/tex; mode=display">Relu = max(0,x)</script><script type="math/tex; mode=display">Relu^\prime =\begin{cases}\ 1 \ & x>0 \\\ 0 \ & x \leq 0\end{cases}</script><ul><li>优点：正区间解决了梯度消失的问题；计算速度快，判断输入是否为正；收敛速度快；</li><li>缺点：输出不是零均值；Dead ReLU Problem，指的是某些神经元可能永远不会被激活，导致相应的参数永远不能被更新，产生原因：（1）不好的参数初始化，较少见 （2）learning rate太高导致在训练过程中参数更新太大，不幸使网络进入这种状态。解决方法是可以采用Xavier初始化方法，以及避免将learning rate设置太大或使用adagrad等自动调节learning rate的算法。</li><li><strong>为什么神经元会出现Dead</strong>：设学习速率为r，ReLU的梯度为<script type="math/tex">\mathrm{d}(ReLU(w*x+b))</script>，那么权重更新公式为：<script type="math/tex">w = w - r*\mathrm{d}(ReLU(w*x+b))</script>; 如果<script type="math/tex">\mathrm{d}(ReLU(w*x+b))</script>为1，那么权重更新公式变成了：<script type="math/tex">w = w - r</script>；如果学习率 r 较大使更新后的值w为较大的负值，那么很可能在下次迭代中由于<script type="math/tex">w*x+b<0</script>, 使<script type="math/tex">\mathrm{d}(ReLU(w*x+b))</script>变为0，此时w再也无法更新，神经元节点就“死了”。简单来说：Relu在输入小于0的时候，导数为0，在反向传播的过程中，无法更新参数w，如果恰好此时的w使神经元的Relu在输入小于0，那么该神经元dead。</li></ul><h2 id="4、LeakyRelu-变体PRelu，RRelu"><a href="#4、LeakyRelu-变体PRelu，RRelu" class="headerlink" title="4、LeakyRelu (变体PRelu，RRelu)"></a>4、LeakyRelu (<a href="https://blog.csdn.net/qq_23304241/article/details/80300149">变体PRelu，RRelu</a>)</h2><script type="math/tex; mode=display">LeakyRelu = max(\alpha x,x)</script><script type="math/tex; mode=display">LeakyRelu ^\prime =\begin{cases}\ 1 \ & x>0 \\\ \alpha \ & x \leq 0\end{cases}</script><ul><li>优点：具备Relu的优点；负值部分引入参数<script type="math/tex">\alpha</script>，减弱梯度消失的问题；</li><li>缺点：输出非零均值；因为往往<script type="math/tex">\alpha</script>的值很小，依然会陷入接近梯度消失的问题；</li></ul><h2 id="5、ELU-Exponential-Linear-Units"><a href="#5、ELU-Exponential-Linear-Units" class="headerlink" title="5、ELU (Exponential Linear Units) "></a>5、<a href="https://blog.csdn.net/tyhj_sf/article/details/79932893">ELU (Exponential Linear Units) </a></h2><script type="math/tex; mode=display">ELU = \begin{cases}x \ & x>0 \\\alpha(e^x-1) \ & x \leq 0\end{cases}</script><script type="math/tex; mode=display">ELU ^\prime =\begin{cases}\ 1 \ & x>0 \\\ \alpha e^x \ & x \leq 0\end{cases}</script><ul><li>优点：具备Relu的优点；无Dead Relu问题；输出的均值接近0，zero-centered；</li><li>缺点：引入参数且计算量大；实际应用中并没有总是优于Relu的表现；</li></ul><h2 id="6、MaxOut"><a href="#6、MaxOut" class="headerlink" title="6、MaxOut"></a>6、MaxOut</h2><script type="math/tex; mode=display">h_i(x) = \max_{j\in [i, k]}(z_{ij})</script><p>MaxOut为神经网络的一层，类似于池化层，其作用等同于激活函数。从公式上看类似于maxpooling，下采样。</p><h2 id="7、softmax"><a href="#7、softmax" class="headerlink" title="7、softmax"></a>7、softmax</h2><p>归一化指数函数，逻辑函数的一种推广；将K维向量映射到0，1之间的另一个K维向量中，且映射后的向量和为1。化</p><script type="math/tex; mode=display">\begin{aligned}&{\sigma(z)}_j = \frac {e^{z_j}} {\sum_{k=1} ^K e^{z_k}} \\&j = 1,2,\ldots,K\end{aligned}</script><p>特别的，多项逻辑回归和线性判别分析中</p><script type="math/tex; mode=display">\begin{aligned}&p(y=j|x) = \frac {e^{x^T W_j}} {\sum_{k=1} ^K e^{x^T W_k}} \\&j = 1,2,\ldots,K\end{aligned}</script><ul><li>优点：Softmax函数实际上是有限项离散概率分布的<strong>梯度对数归一</strong>，因此，Softmax函数在包括多项逻辑回归，多项线性判别分析，朴素贝叶斯分类器和人工神经网络等的多种基于概率的多分类问题方法中都有着广泛应用；</li><li>缺点：应用于多分类时要求各分类独立；<br>softmax求导：其导数为一雅可比矩阵；<a href="https://blog.csdn.net/cassiePython/article/details/80089760">求导方法1</a>，<a href="https://blog.csdn.net/abeldeng/article/details/79092962">求导方法2</a></li></ul><h1 id="三、极大似然估计（参数估计）"><a href="#三、极大似然估计（参数估计）" class="headerlink" title="三、极大似然估计（参数估计）"></a>三、极大似然估计（参数估计）</h1><p>参考博客：<a href="https://blog.csdn.net/qq_39355550/article/details/81809467">https://blog.csdn.net/qq_39355550/article/details/81809467</a></p><h1 id="四、参数更新"><a href="#四、参数更新" class="headerlink" title="四、参数更新"></a>四、参数更新</h1><h2 id="1、Vanilla-update"><a href="#1、Vanilla-update" class="headerlink" title="1、Vanilla update"></a>1、Vanilla update</h2><script type="math/tex; mode=display">x = x - \alpha \, dx</script><p>$alpha$为learning rate（学习速率）</p><h2 id="2、Momentum-update"><a href="#2、Momentum-update" class="headerlink" title="2、Momentum update"></a>2、Momentum update</h2><script type="math/tex; mode=display">v = \mu \, v - \alpha \, dx</script><script type="math/tex; mode=display">x = x + v</script><p>$\alpha$为learning rate（学习速率），$\mu$为动量</p><h2 id="3、Nesterov-Momentum"><a href="#3、Nesterov-Momentum" class="headerlink" title="3、Nesterov Momentum"></a>3、Nesterov Momentum</h2><script type="math/tex; mode=display">x_{ahead} = x + \mu \, v</script><script type="math/tex; mode=display">v = \mu \, v - \alpha_{learning_rate} \, dx_{ahead}</script><script type="math/tex; mode=display">x = x + v</script><h2 id="4、SGD"><a href="#4、SGD" class="headerlink" title="4、SGD"></a>4、SGD</h2><h2 id="5、Adagrad"><a href="#5、Adagrad" class="headerlink" title="5、Adagrad"></a>5、Adagrad</h2><h2 id="6、Adam"><a href="#6、Adam" class="headerlink" title="6、Adam"></a>6、Adam</h2><h1 id="五、卷积深入理解"><a href="#五、卷积深入理解" class="headerlink" title="五、卷积深入理解"></a>五、卷积深入理解</h1><p>卷积公式：</p><script type="math/tex; mode=display">h(x) = f(x) * g(x) = \int ^{\infty}_{-\infty} \, f(\tau) \, g(x - \tau) \, d\tau</script><p>离散形式：</p><script type="math/tex; mode=display">y(n) = x(n)*h(n) = \sum ^{\infty}_{-\infty}x(i) \, h(n-i)</script><p>统计学中，加权的滑动平均是一种卷积。概率论中，两个统计独立变量X与Y的和的概率密度函数是X与Y的概率密度函数的卷积。声学中，回声可以用源声与一个反映各种反射效应的函数的卷积表示。电子工程与信号处理中，任一个线性系统的输出都可以通过将输入信号与系统函数（系统的冲激响应）做卷积获得。物理学中，任何一个线性系统（符合叠加原理）都存在卷积。</p><p><strong>CNN卷积的操作，可以理解为在频域上的DNN；此外卷积核在特征图上的stride可以理解为特征的生成过程。</strong></p>]]></content>
      
      
      <categories>
          
          <category> ai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode</title>
      <link href="2020/11/08/diary/"/>
      <url>2020/11/08/diary/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1、前序遍历"><a href="#1、前序遍历" class="headerlink" title="1、前序遍历"></a>1、前序遍历</h2><p>根 -&gt; 左 -&gt; 右</p><ul><li>递归：root.val + func(root.left) + func(root.right)</li><li>迭代: [root] -&gt; stack.pop -&gt; root.right -&gt; root.left</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 1、递归</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> self.res</span><br><span class="line">        </span><br><span class="line">        self.res.append(root.val)</span><br><span class="line">        self.preorderTraversal(root.left)</span><br><span class="line">        self.preorderTraversal(root.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2、迭代</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        stack = [root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="2、中序遍历"><a href="#2、中序遍历" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h2><p>左 -&gt; 根 -&gt; 右</p><ul><li>递归：func(root.left) + root.val + func(root.right)</li><li>迭代: 指针滑动，找出所有左子树，pop，保存tmp.val, 赋值右子树</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.value = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 1、递归</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> self.value</span><br><span class="line">        </span><br><span class="line">        self.inorderTraversal(root.left)</span><br><span class="line">        self.value.append(root.val)</span><br><span class="line">        self.inorderTraversal(root.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2、迭代</span></span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        p = root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p:</span><br><span class="line">            <span class="keyword">while</span> p:</span><br><span class="line">                stack.append(p)</span><br><span class="line">                p = p.left</span><br><span class="line">            tmp = stack.pop()</span><br><span class="line">            print(tmp)</span><br><span class="line">            res.append(tmp.val)</span><br><span class="line">            p = tmp.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h2><p>左 -&gt; 右 -&gt; 根</p><ul><li>递归：root.val + func(root.right) + func(root.left) 然后反转</li><li>迭代: [root] -&gt; stack.pop -&gt; root.left -&gt; root.right<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 1、递归</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> self.res</span><br><span class="line">        </span><br><span class="line">        self.postorderTraversal(root.left)</span><br><span class="line">        self.postorderTraversal(root.right)</span><br><span class="line">        self.res.append(root.val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2、迭代</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        tmp = []</span><br><span class="line">        stack = [root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            item = stack.pop()</span><br><span class="line">            tmp.append(item.val)</span><br><span class="line">            <span class="keyword">if</span> item.left:</span><br><span class="line">                stack.append(item.left)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> item.right:</span><br><span class="line">                stack.append(item.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tmp[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4、BFS广度遍历-层次遍历"><a href="#4、BFS广度遍历-层次遍历" class="headerlink" title="4、BFS广度遍历(层次遍历)"></a>4、BFS广度遍历(层次遍历)</h2><ul><li>[root] -&gt; [root.left, root.right] -&gt; [tmp.val]</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        cur = [root]</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            tmp = []</span><br><span class="line">            next_cur = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> cur:</span><br><span class="line">                tmp.append(i.val)</span><br><span class="line">                <span class="keyword">if</span> i.left:</span><br><span class="line">                    next_cur.append(i.left)</span><br><span class="line">                <span class="keyword">if</span> i.right:</span><br><span class="line">                    next_cur.append(i.right)</span><br><span class="line">            res.append(tmp)</span><br><span class="line">            cur = next_cur</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>):</span></span><br><span class="line">        key = left</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right):</span><br><span class="line">            <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> arr[right] &gt;= arr[key]:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> arr[left] &lt;= arr[key]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            (arr[left], arr[right]) = (arr[right], arr[left])</span><br><span class="line"></span><br><span class="line">        (arr[left], arr[key]) = (arr[key], arr[left])</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span>(<span class="params">arr, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = partition(arr, left, right)</span><br><span class="line">        quicksort(arr, left, mid<span class="number">-1</span>)</span><br><span class="line">        quicksort(arr, mid+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(lst)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line">    quicksort(lst, <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="1、快慢指针"><a href="#1、快慢指针" class="headerlink" title="1、快慢指针"></a>1、快慢指针</h2><p>快慢指针一般都初始化指向链表的头结点 head，前进时快指针 fast 在前，慢指针 slow 在后，巧妙解决一些链表中的问题。</p><h3 id="1-、判定链表中是否含有环"><a href="#1-、判定链表中是否含有环" class="headerlink" title="(1)、判定链表中是否含有环"></a>(1)、判定链表中是否含有环</h3><ul><li><p>单链表的特点是每个节点只知道下一个节点，所以一个指针的话无法判断链表中是否含有环的。</p></li><li><p>如果链表中不包含环，那么这个指针最终会遇到空指针 null 表示链表到头了，这还好说，可以判断该链表不含环。</p></li><li><p>但是如果链表中含有环，那么这个指针就会陷入死循环，因为环形数组中没有 null 指针作为尾部节点。</p></li><li><p>经典解法就是用两个指针，一个每次前进两步，一个每次前进一步。如果不含有环，跑得快的那个指针最终会遇到 null，说明链表不含环；如果含有环，快指针最终会超慢指针一圈，和慢指针相遇，说明链表含有环。</p></li></ul><h3 id="2-、已知链表中含有环，返回这个环的起始位置"><a href="#2-、已知链表中含有环，返回这个环的起始位置" class="headerlink" title="(2)、已知链表中含有环，返回这个环的起始位置"></a>(2)、已知链表中含有环，返回这个环的起始位置</h3><ul><li><p>当快慢指针相遇时，让其中任一个指针重新指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。这是为什么呢？</p></li><li><p>第一次相遇时，假设慢指针 slow 走了 k 步，那么快指针 fast 一定走了 2k 步，也就是说比 slow 多走了 k 步（也就是环的长度）</p></li><li><p>设相遇点距环的起点的距离为 m，那么环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。</p></li><li><p>巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点，所以，只要我们把快慢指针中的任一个重新指向 head，然后两个指针同速前进，k - m 步后就会相遇，相遇之处就是环的起点了</p></li></ul><h3 id="3-、寻找链表中间位置"><a href="#3-、寻找链表中间位置" class="headerlink" title="(3)、寻找链表中间位置"></a>(3)、寻找链表中间位置</h3><ul><li>类似上面的思路，我们还可以让快指针一次前进两步，慢指针一次前进一步，当快指针到达链表尽头时，慢指针就处于链表的中间位置</li></ul><h3 id="4-、寻找链表的倒数第-k-个元素"><a href="#4-、寻找链表的倒数第-k-个元素" class="headerlink" title="(4)、寻找链表的倒数第 k 个元素"></a>(4)、寻找链表的倒数第 k 个元素</h3><ul><li>我们的思路还是使用快慢指针，让快指针先走 k 步，然后快慢指针开始同速前进。这样当快指针走到链表末尾 null 时，慢指针所在的位置就是倒数第 k 个链表节点（为了简化，假设 k 不会超过链表长度）</li></ul><h2 id="2、左右指针"><a href="#2、左右指针" class="headerlink" title="2、左右指针"></a>2、左右指针</h2><p>左右指针在数组中实际是指两个索引值，一般初始化为 left = 0, right = nums.length - 1 。</p><ul><li>二分查找</li><li>两数之和（升序数组，找出两数和为目标数值的数）</li><li>反转数组</li><li>滑动窗口算法（这也许是双指针技巧的最高境界了，如果掌握了此算法，可以解决一大类子字符串匹配的问题）</li></ul><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p><a href="https://blog.csdn.net/weixin_41571493/article/details/81875088">https://blog.csdn.net/weixin_41571493/article/details/81875088</a></p><h2 id="1、交换排序"><a href="#1、交换排序" class="headerlink" title="1、交换排序"></a>1、交换排序</h2><h3 id="1-1-冒泡排序"><a href="#1-1-冒泡排序" class="headerlink" title="1.1 冒泡排序"></a>1.1 冒泡排序</h3><ul><li><p>顺序比较，每次比较相邻元素，满足条件不交换，不满足条件交换。（每次都会将最值放到队首（尾））</p></li><li><p>时间复杂度O(n^2)，空间复杂度O(1)</p></li></ul><h3 id="1-2-快速排序"><a href="#1-2-快速排序" class="headerlink" title="1.2 快速排序"></a>1.2 快速排序</h3><ul><li><p>选基准值，小的放左，大的放右，基准值将其分为两个分区</p></li><li><p>对两个分区递归的使用相同方法排序</p></li><li><p>时间复杂度O(nlogn)，空间复杂度O(logn)</p></li></ul><h2 id="2、插入排序"><a href="#2、插入排序" class="headerlink" title="2、插入排序"></a>2、插入排序</h2><h3 id="2-1-简单的插入排序"><a href="#2-1-简单的插入排序" class="headerlink" title="2.1 简单的插入排序"></a>2.1 简单的插入排序</h3><ul><li><p>第一个元素开始，可以认为已经被排序</p></li><li><p>取出下一个元素，在已经排好序的前面的序列中从后向前扫描</p></li><li><p>如果扫描的元素大于取出的元素，则其向后移，直到扫描到等于或者小于其的位置，将其放入</p></li><li><p>重复上述步骤</p></li><li><p>时间复杂度O(n^2)，空间复杂度O(1)</p></li></ul><h3 id="2-2-希尔排序"><a href="#2-2-希尔排序" class="headerlink" title="2.2 希尔排序"></a>2.2 希尔排序</h3><ul><li><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序</p></li><li><p>时间复杂度O(nlogn)，空间复杂度O(1)</p></li></ul><h2 id="3、选择排序"><a href="#3、选择排序" class="headerlink" title="3、选择排序"></a>3、选择排序</h2><h3 id="3-1-简单选择排序"><a href="#3-1-简单选择排序" class="headerlink" title="3.1 简单选择排序"></a>3.1 简单选择排序</h3><ul><li><p>对数据操作n-1轮，每轮找出一个最大（小）值。</p></li><li><p>操作指选择，即未排序数逐个比较交换，争夺最值位置，每轮将一个未排序位置上的数交换成已排序数，即每轮选一个最值</p></li><li><p>时间复杂度O(n^2)，空间复杂度O(1)</p></li></ul><h3 id="3-2-堆排序"><a href="#3-2-堆排序" class="headerlink" title="3.2 堆排序"></a>3.2 堆排序</h3><ul><li><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p></li><li><p>堆排序的初始建堆过程比价复杂，对O(n)级别个非叶子节点进行堆调整操作O(logn)，时间复杂度O(nlogn)；之后每一次堆调整操作确定一个数的次序，时间复杂度O(nlogn)。合起来时间复杂度O(nlogn)，空间复杂度O(1)</p></li></ul><h2 id="4、归并排序"><a href="#4、归并排序" class="headerlink" title="4、归并排序"></a>4、归并排序</h2><h3 id="4-1-二路归并排序"><a href="#4-1-二路归并排序" class="headerlink" title="4.1 二路归并排序"></a>4.1 二路归并排序</h3><ul><li>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</li><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li><li>时间复杂度O(nlogn)</li></ul><h2 id="5、线性时间非比较类排序"><a href="#5、线性时间非比较类排序" class="headerlink" title="5、线性时间非比较类排序"></a>5、线性时间非比较类排序</h2><h3 id="5-1-计数排序"><a href="#5-1-计数排序" class="headerlink" title="5.1 计数排序"></a>5.1 计数排序</h3><ul><li>计数排序用待排序的数值作为计数数组（列表）的下标，统计每个数值的个数，然后依次输出即可</li><li>时间复杂度为O(n+k)，空间复杂度O(n+k), k类</li></ul><h1 id="特征选择的方法"><a href="#特征选择的方法" class="headerlink" title="特征选择的方法"></a>特征选择的方法</h1><p><a href="https://blog.csdn.net/SecondLieutenant/article/details/80693765">https://blog.csdn.net/SecondLieutenant/article/details/80693765</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
